
extends ../partials/lecture.pug

block vars
  - title = '<strong>Virtuelle Kameras</strong> in der Echtzeit-Computergrafik';
  - lead = 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum.';
  - teaser = require('./virtual-camera/psychonauts2-teaser.png?as=webp');

block content

  //- Bootstrap Grid System
  //- https://getbootstrap.com/docs/5.1/layout/grid/

  .container
    .row
      .offset-1.col-10

        .alert.alert-primary
          p In dieser Einheit wird gezeigt, wie virtuelle Kameras in der Theorie und in der praktischen Umsetzung funktionieren und wie effizient 3D Szenen aus wohldefinierten Blickwinkeln dargestellt werden können.
          hr
          h4 Nach dieser Lehreinheit solltest Du&hellip;
          ul.list-unstyled
            li &hellip;die Eigenschaften/Attribute einer virtuellen Kamera kennen,
            li &hellip;die einzelnen Schritte der Kameratransformation beschreiben können,
            li &hellip;typische Koordinatenräume kennen und zuordnen können und
            li &hellip;die Rolle homogener Koordinaten für perspektivische Verzerrung nachvollziehen können.

    .row
      .offset-1.col-10

        .alert.alert-secondary
          h4 Vorwissen
          p Zum besseren Verständnis von virtuellen Kameras in der Echtzeitcomputergrafik, empfehlen wir die folgenden Inhalte vorab zu sichten und zumindest grundlegend durchzuarbeiten:
          ol
            li Unsere Vorlesungen zu den Themen:
              ul
                li #[a(href = 'https://youtu.be/oEpQUoCig18') Vektorrechnung &amp; Basistransformationen] (YouTube)
                li #[a(href = 'https://youtu.be/YDDQE45PZLs') Komposition von Transformationen] (YouTube)
            li Optional aber empfehlenswert zur Vertiefung: #[br]
              | Die sehr anschauliche und interaktive Einführung zu den physikalischen Grundlagen von Kameras und Linsen von Bartosz Ciechanowski: #[a(href = 'https://ciechanow.ski/cameras-and-lenses/') https://ciechanow.ski/cameras-and-lenses/].


  section.container
    .row
      .offset-1.col-10
        !=require("./virtual-camera/sec-motivation.md")

  section.container
    .row
      .offset-1.col-10
        !=require("./virtual-camera/sec-camera-model.md")

  section.container
    .row
      .offset-1.col-10
        !=require("./virtual-camera/sec-implementation.md")

  section.container
    .row
      .offset-1.col-10
        !=require("./virtual-camera/sec-view-transform.md")

  section.container
    .row
      .offset-1.col-10
        !=require("./virtual-camera/sec-projection-transform.md")

  .container
    .row
      .offset-1.col-10

        .alert.alert-secondary
          h4 Einschub – Projektionsebene
          p Was heißt denn nun, dass wir eine Projektionsebene verwenden? Normalerweise projiziert eine Kamera doch nichts?
          p Dazu können wir uns die vereinfachte Funktionsweise einer simplen Lochkamera ansehen: 
          p Dabei entsteht das umgedrehte Bild auf der Rückwand der Lochkamera, nachdem das Licht durch das Loch „gebündelt“* wird.
          p Die Rückwand der Kamera ist also die Projektionsebene, auf der das Bild entsteht. 
          p Wir wollen jedoch nicht physikalisch Lichtstrahlen erfassen, sondern nur berechnen, wie groß die Gegenstände in Relation zueinander sind.
          p Wir können die Projektionsebene also beliebig – auch vor der Kamera – platzieren und mit dem Strahlensatz bestimmen, wie groß Objekte auf dieser Ebene erscheinen.
          p Für unsere Anwendung ist die Projektionsebene also eine <em>Referenzebene</em>, um zu steuern, wie andere Objekte skaliert werden.
          p HIER NOCH EIN BILD EINFÜGEN
          

